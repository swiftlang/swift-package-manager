#!/usr/bin/env python3
# ===----------------------------------------------------------------------===##
#
# This source file is part of the Swift open source project
#
# Copyright (c) 2025 Apple Inc. and the Swift project authors
# Licensed under Apache License v2.0 with Runtime Library Exception
#
# See http://swift.org/LICENSE.txt for license information
# See http://swift.org/CONTRIBUTORS.txt for the list of Swift project authors
#
# ===----------------------------------------------------------------------===##

import argparse
import dataclasses
import itertools
import logging
import os
import pathlib
import platform
import shlex
import sys
import typing as t

from helpers import (
    Configuration,
    change_directory,
    call,
    call_output,
)

logging.basicConfig(
    format=" | ".join(
        [
            # Prefix script name to the log in an attempt to avoid confusion when parsing logs
            f"{pathlib.Path(sys.argv[0]).name}",
            "%(asctime)s",
            "%(levelname)-8s",
            "%(module)s",
            "%(funcName)s",
            "Line:%(lineno)d",
            "%(message)s",
        ]
    ),
    level=logging.INFO,
)


REPO_ROOT_PATH = pathlib.Path(__file__).parent.parent.resolve()


def get_arguments() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )

    parser.add_argument(
        "-v",
        "--verbose",
        dest="is_verbose",
        action="store_true",
        help="When set, prints verbose information.",
    )
    parser.add_argument(
        "-c",
        "--configuration",
        type=Configuration,
        dest="config",
        default=Configuration.DEBUG,
        choices=[e for e in Configuration],
        help="The configuraiton to use.",
    )
    parser.add_argument(
        "-t",
        "--triple",
        type=str,
        dest="triple",
    )
    parser.add_argument(
        "-b",
        "--build-system",
        type=str,
        dest="build_system",
    )
    parser.add_argument(
        "--enable-swift-testing",
        action="store_true",
    )
    parser.add_argument(
        "--enable-xctest",
        action="store_true",
    )
    args = parser.parse_args()
    return args


def log_environment() -> None:
    logging.info("Environment Variables")
    for key, value in sorted(os.environ.items()):
        logging.info("  --> %s=%r", key, value)


def get_swiftpm_bin_dir(config: Configuration) -> pathlib.Path:
    logging.info("Retrieving Swift PM binary directory.")
    swiftpm_bin_dir = pathlib.Path(
        call_output(["swift", "build", "--configuration", config, "--show-bin-path"])
    )
    logging.info("SwiftPM BIN DIR: %s", swiftpm_bin_dir)
    return swiftpm_bin_dir


def is_on_darwin() -> bool:
    return platform.uname().system == "Darwin"


def set_environment(
    *,
    swiftpm_bin_dir: pathlib.Path,
) -> None:
    os.environ["SWIFTCI_IS_SELF_HOSTED"] = "1"

    # Set the SWIFTPM_CUSTOM_BIN_DIR path
    os.environ["SWIFTPM_CUSTOM_BIN_DIR"] = str(swiftpm_bin_dir)

    # Ensure SDKROOT is configure
    if is_on_darwin():
        sdk_root = call_output(shlex.split("xcrun --show-sdk-path --sdk macosx"))
        logging.debug("macos sdk root = %r", sdk_root)
        os.environ["SDKROOT"] = sdk_root
    log_environment()


def run_bootstrap(swiftpm_bin_dir: pathlib.Path) -> None:
    logging.info("Current working directory is %s", pathlib.Path.cwd())
    logging.info("Bootstrapping with the XCBuild codepath...")
    call(
        [
            REPO_ROOT_PATH / "Utilities" / "bootstrap",
            "build",
            "--release",
            "--verbose",
            "--cross-compile-hosts",
            "macosx-arm64",
            "--skip-cmake-bootstrap",
            "--swift-build-path",
            (swiftpm_bin_dir / "swift-build").resolve(),
        ],
    )


GlobalArgsValueType = str


@dataclasses.dataclass
class GlobalArgs:
    global_argument: str
    value: t.Optional[GlobalArgsValueType]


def filterNone(items: t.Iterable) -> t.Iterable:
    return list(filter(lambda x: x is not None, items))


def main() -> None:
    args = get_arguments()
    logging.getLogger().setLevel(logging.DEBUG if args.is_verbose else logging.INFO)
    logging.debug("Args: %r", args)
    ignore_args = ["-Xlinker", "/ignore:4217"] if os.name == "nt" else []
    globalArgsData = [
        GlobalArgs(global_argument="--triple", value=args.triple),
        GlobalArgs(global_argument="--build-system", value=args.build_system),
    ]
    global_args: t.Iterator[GlobalArgsValueType] = list(
        itertools.chain.from_iterable(
            [[arg.global_argument, arg.value] for arg in globalArgsData if arg.value]
        )
    )
    logging.debug("Global Args: %r", global_args)
    with change_directory(REPO_ROOT_PATH):
        swiftpm_bin_dir = get_swiftpm_bin_dir(config=args.config)
        set_environment(swiftpm_bin_dir=swiftpm_bin_dir)

        call(
            filterNone(
                [
                    "swift",
                    "--version",
                ]
            )
        )

        call(
            filterNone(
                [
                    "swift",
                    "package",
                    "update",
                ]
            )
        )
        call(
            filterNone(
                [
                    "swift",
                    "build",
                    *global_args,
                    "--configuration",
                    args.config,
                    *ignore_args,
                ]
            )
        )

        swift_testing_arg = (
            "--enable-swift-testing" if args.enable_swift_testing else None
        )
        xctest_arg = "--enable-xctest" if args.enable_swift_testing else None
        call(
            filterNone(
                [
                    "swift",
                    "run",
                    "swift-test",
                    *global_args,
                    "--configuration",
                    args.config,
                    "--parallel",
                    swift_testing_arg,
                    xctest_arg,
                    "--scratch-path",
                    ".test",
                    *ignore_args,
                ]
            )
        )

        integration_test_dir = (REPO_ROOT_PATH / "IntegrationTests").as_posix()
        call(
            filterNone(
                [
                    "swift",
                    "package",
                    "--package-path",
                    integration_test_dir,
                    "update",
                ]
            )
        )
        call(
            filterNone(
                [
                    "swift",
                    "run",
                    "swift-test",
                    *global_args,
                    "--package-path",
                    integration_test_dir,
                    "--parallel",
                    *ignore_args,
                ]
            )
        )

    if is_on_darwin():
        run_bootstrap(swiftpm_bin_dir=swiftpm_bin_dir)
    logging.info("Done")


if __name__ == "__main__":
    main()
